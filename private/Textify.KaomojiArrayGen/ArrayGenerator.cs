//
// Textify  Copyright (C) 2023-2025  Aptivi
//
// This file is part of Textify
//
// Textify is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Textify is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY, without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;

namespace Textify.KaomojiArrayGen
{
    [Generator]
    public class ArrayGenerator : IIncrementalGenerator
    {
        private static readonly Assembly asm = typeof(ArrayGenerator).Assembly;

        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            string header =
                $$"""
                //
                // Textify  Copyright (C) 2023-2025  Aptivi
                //
                // This file is part of Textify
                //
                // Textify is free software: you can redistribute it and/or modify
                // it under the terms of the GNU General Public License as published by
                // the Free Software Foundation, either version 3 of the License, or
                // (at your option) any later version.
                //
                // Textify is distributed in the hope that it will be useful,
                // but WITHOUT ANY WARRANTY, without even the implied warranty of
                // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                // GNU General Public License for more details.
                //
                // You should have received a copy of the GNU General Public License
                // along with this program.  If not, see <https://www.gnu.org/licenses/>.
                //
                
                // <auto-generated/>

                using System.Collections.Generic;

                namespace Textify.Data.Unicode
                {
                    public static partial class KaomojiManager
                    {
                
                """;
            string kaomojiCategory =
                $$"""
                    }
                    
                    /// <summary>
                    /// Kaomoji category
                    /// </summary>
                    public enum KaomojiCategory
                    {
                """;
            string kaomojiSubcategory =
                $$"""
                    }
                    
                    /// <summary>
                    /// Kaomoji subcategory
                    /// </summary>
                    public enum KaomojiSubcategory
                    {
                """;
            string footer =
                $$"""
                    }
                }
                """;
            var builder = new StringBuilder(header);
            var kaomojis = GetKaomojis();

            // Populate the ultimate array for all kaomojis
            builder.Append(PopulateKaomojiArray(kaomojis));
            builder.AppendLine(kaomojiCategory);
            builder.Append(PopulateKaomojiCategory(kaomojis));
            builder.AppendLine(kaomojiSubcategory);
            builder.Append(PopulateKaomojiSubcategory(kaomojis));

            // End the file
            builder.AppendLine(footer);
            context.RegisterPostInitializationOutput(ctx =>
            {
                ctx.AddSource("KaomojiManager.g.cs", SourceText.From(builder.ToString(), Encoding.UTF8));
            });
        }

        private static string PopulateKaomojiCategory(Dictionary<string, Dictionary<string, List<string>>> kaomojis)
        {
            var builder = new StringBuilder();
            foreach (var category in kaomojis.Keys)
            {
                builder.AppendLine( "        /// <summary>");
                builder.AppendLine($"        /// Kaomoji enumeration for \"{category}\"");
                builder.AppendLine( "        /// </summary>");
                builder.AppendLine($"        {category},");
            }
            return builder.ToString();
        }

        private static string PopulateKaomojiSubcategory(Dictionary<string, Dictionary<string, List<string>>> kaomojis)
        {
            var builder = new StringBuilder();
            foreach (var category in kaomojis.Keys)
            {
                var subcategories = kaomojis[category];
                foreach (var subcategory in subcategories.Keys)
                {
                    builder.AppendLine( "        /// <summary>");
                    builder.AppendLine($"        /// Kaomoji enumeration for \"{subcategory}\", subcategory of \"{category}\"");
                    builder.AppendLine( "        /// </summary>");
                    builder.AppendLine($"        {subcategory},");
                }
            }
            return builder.ToString();
        }

        private static string PopulateKaomojiArray(Dictionary<string, Dictionary<string, List<string>>> kaomojis)
        {
            string arrayFooter =
                $$"""
                        };
                
                """;
            string header =
                $$"""
                        private static readonly Dictionary<KaomojiCategory, Dictionary<KaomojiSubcategory, string[]>> kaomojis = new()
                        {
                
                """;
            var builder = new StringBuilder(header);
            int categories = 0;
            foreach (var category in kaomojis.Keys)
            {
                var subcategories = kaomojis[category];
                int subcategoriesCount = 0;

                // Populate the KaomojiCategory string
                string kaomojiCategoryRef = $"KaomojiCategory.{category}";
                builder.Append(
                    $"            {{ {kaomojiCategoryRef}, new()" +
                    $"            {{"
                );
                foreach (var subcategory in subcategories.Keys)
                {
                    // Populate the KaomojiSubcategory string
                    string kaomojiSubcategoryRef = $"KaomojiSubcategory.{subcategory}";
                    builder.Append(
                        $"                {{ {kaomojiSubcategoryRef},\n" +
                        $"                [\n" +
                        $"                  @\""
                    );

                    // Add the sequences
                    var sequences = subcategories[subcategory].Select((str) => str.Replace("\"", "\"\""));
                    builder.AppendLine(string.Join("\",\n                  @\"", sequences) + "\"");

                    // Add the resultant subcategory info
                    subcategoriesCount++;
                    builder.AppendLine(
                        $"                ]\n" +
                        $"              }}");
                    if (subcategoriesCount < subcategories.Count)
                        builder.AppendLine(",");
                }

                // Add the resultant category info
                categories++;
                builder.Append(
                    $"            }}\n" +
                    $"          }}"
                );
                if (categories < kaomojis.Count)
                    builder.AppendLine(",");
            }
            builder.AppendLine("");
            builder.Append(arrayFooter);
            return builder.ToString();
        }

        private static Dictionary<string, Dictionary<string, List<string>>> GetKaomojis()
        {
            // Open the stream that contains the kaomoji list
            var stream = asm.GetManifestResourceStream($"{asm.GetName().Name}.kaomojis.json") ??
                throw new Exception("Failed to find kaomoji file.");

            // Add the whole list
            var kaomojis = new Dictionary<string, Dictionary<string, List<string>>>();
            var kaomojiStreamReader = new StreamReader(stream);
            var kaomojiReader = new JsonTextReader(kaomojiStreamReader);
            var kaomojiArray = JArray.Load(kaomojiReader);
            foreach (var categoryObject in kaomojiArray)
            {
                var name = categoryObject["name"] ?? "Unknown name";
                var subcategories = categoryObject["categories"] ??
                    throw new Exception("Can't get categories");
                var subcategoriesDict = new Dictionary<string, List<string>>();
                foreach (var subcategory in subcategories)
                {
                    var subcategoryName = subcategory["name"] ?? "Unknown name";
                    var subcategoryKaomojis = subcategory["emoticons"] ??
                        throw new Exception("Can't get kaomojis");
                    var sequences = new List<string>();
                    foreach (var kaomoji in subcategoryKaomojis)
                        sequences.Add(kaomoji.ToString());
                    subcategoriesDict.Add(subcategoryName.ToString(), sequences);
                }
                kaomojis.Add(name.ToString(), subcategoriesDict);
            }
            return kaomojis;
        }
    }
}
